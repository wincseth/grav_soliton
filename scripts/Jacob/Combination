#created by Jacob Herman

import numpy as np
import matplotlib.pyplot as plt
#global variables-----------------------------------------------------------------

#users input for the code
n = 1200 #interval step
ZETA_MAX = 120 #maximum zeta value
ZETA_MIN = 0 #minimum zeta value
loops = 20 #number of loops the program will iterate through
#---------------------------------------------------------------------------------
#global variables after user input
DELTA =(ZETA_MAX)/(n + 1)
ZETA = np.arange(ZETA_MIN, ZETA_MAX, DELTA) #initializing ZETA values arange(begin, end, stepsize)
N_max = len(ZETA)#set up the size of the matrix's
G = 6.7*10**(-39) #normalized gravity
M_PL = 1 / np.sqrt(G) #mass of plank mass
M = 8.2*10**10 #if a equals the atomic Bohr radius
#g00 = 1 - zeta/zeta_s #time metric in terms of zeta's
#grr = 1/g00 #radial metric in terms of zeta's
a = 1 /(G*M**3)#gravitational bohr radius
R_S = 2*G*M #schwarzschild radius

#functions------------------------------------------------------------------------

def metric(ZETA_S):
    '''perameters: 1-d array for A & B
    returns: 1-d array for g00 & grr'''
    g00 = np.ones(N_max)
    grr = np.ones(N_max)
    for i in range(N_max):
        if ZETA[i] <= ZETA_S:
            g00[i] = 1
            grr[i] = 1
        else:
            g00[i] = 1 - ZETA_S/ZETA[i] #time metric in terms of zeta's
            grr[i] = 1/g00[i] #radial metric in terms of zeta's
    #print("g00= ", g00)
    #print("grr= ", grr)
    return g00, grr

def A_B_solver(ZETA_S):
    A = np.ones(N_max) #initializes the A_array as zeros
    B = np.ones(N_max) #initializes the B_array as zeros
    for i in range(N_max):
        if ZETA[i] <= ZETA_S:
            A[i] = 0
            B[i] = 0
        elif ZETA[i] == 0:
            A[i] = 1
            B[i] = -1
        else:
            A[i] = np.log(1 - ZETA_S/ZETA[i])/2
            B[i] = -A[i]
    return A, B

def A_B_end(u_tilde, g00, grr, ZETA_S):
    dmu_array = np.sqrt(grr/g00)*u_tilde**2
    mu_tilde_end = 0
    for n in range(N_max - 1):
        mu_tilde_end += DELTA*(dmu_array[n] + dmu_array[n + 1])/2
    A_end = np.log(1 - ZETA_S*mu_tilde_end/ZETA[N_max - 1])/2
    B_end = -A_end
    return A_end, B_end

def KG_values(g00, grr, A_array, ZETA_S):
    '''perameters are array's of dimension N_max
    returns are arrays'''
    C = np.zeros(N_max)#initalizes our matricies with 0 to calculate the next step
    D = np.zeros(N_max)
    F = np.zeros(N_max)
    H = np.zeros(N_max)
    for i in range(N_max):
        if ZETA[i] != 0 and i != N_max - 1:
            H[i] = (1/(ZETA[i]*np.sqrt(np.sqrt(g00[i]/grr[i]))))*(ZETA[i + 1]*np.sqrt(np.sqrt(g00[i + 1]/grr[i + 1])) - 2*ZETA[i]*np.sqrt(np.sqrt(g00[i]/grr[i])) + ZETA[i - 1]*np.sqrt(np.sqrt(g00[i - 1]/grr[i - 1])))  # this is h_~"/h_~ = H
        elif ZETA[i] == 0 or i == N_max - 1:
            H[i] = 0
        elif ZETA[i] == ZETA_S:
            H[i] = 0
    #print("H= ", H)
    #print("grr= ", grr)
    #print("DELTA= ", DELTA)
    for i in range(N_max):
        C[i] = ((g00[i]/grr[i])*H[i] + (4/ZETA_S)*np.exp(A_array[i])*np.sinh(A_array[i]) + 2*((g00[i]/grr[i])/(DELTA**2)))
        if i == 0:
            D[i] = -np.sqrt((g00[i]*g00[i+1])/(grr[i]*grr[i+1]))/(DELTA**2)
        elif i != N_max-1:
            #print("grr[i + 1]= ", grr[i + 1])
            #print("grr[i - 1]= ", grr[i - 1])
            D[i] = -np.sqrt((g00[i]*g00[i+1])/(grr[i]*grr[i+1]))/(DELTA**2)
            F[i] = -np.sqrt((g00[i]*g00[i-1])/(grr[i]*grr[i-1]))/(DELTA**2)
        elif i == N_max-1:
            F[i] = -np.sqrt((g00[i]*g00[i-1])/(grr[i]*grr[i-1]))/(DELTA**2)
    return C, D, F

def KG_matrix(C, D, F):
    '''initalizes matrix of N_max by N_max'''
    matrix = np.zeros((N_max, N_max))#setting a nxn matrix all zero meshgrid
    for i in range(0, N_max):    
        matrix[i,i] = C[i]
        if i < N_max - 1:
            matrix[i, i + 1] = D[i]
        if i > 0:
            matrix[i, i-1] = F[i]
    return matrix

def KG_solver(matrix, g00, grr, ZETA_S):
    '''Parameters: returns: epsilon and lmabda as floats, u_bar is a 1-d array
        returns U_bar as an array and epsilon as a schalar '''
    e_vals, e_vecs = np.linalg.eig(matrix)#e_vals are lamdas, e_vecs are ubars
    lamda = min(e_vals)#finds the minimum e_val and saves as lamda
    u_bar = e_vecs[:, np.argmin(e_vals)]#u_bar is saved as an array of minimum values
    epsilon = lamda/(1 + np.sqrt(1 + (ZETA_S*lamda)/2))#calculates epsilon form lamda
    
    norm = np.sum(np.sqrt(g00)*(u_bar*u_bar)*DELTA) #normalizes u_bar
    u_bar_new =u_bar/norm#this takes u_bar and normalizes it to give us a new value of u_bar
    u_bar_new[0] = u_bar_new[N_max-1] = 0#keeps us in bounds of the array
    return epsilon, u_bar_new

def R_tilde(g00, grr, u_bar):
    '''input is an array and output is an array'''
    R_tilde = np.zeros(N_max)
    for i, zeta in enumerate(ZETA):
        if zeta != 0:
            R_tilde[i] = (u_bar[i]**2/zeta**2)*np.sqrt(g00[i]/grr[i])
    return R_tilde

def dR_tilde(R, g00, grr, u_bar):
    '''input is an array 
    return is an array '''
    h_tilde = np.zeros(N_max)
    for i in range(N_max):
        if ZETA[i] != 0:
            h_tilde[i] = ZETA[i]*np.sqrt(np.sqrt(g00[i]/grr[i]))
        else:
            h_tilde[i] = 1
    u_tilde = u_bar*np.sqrt(g00/grr)
    dR_tilde = np.zeros(len(R))
    for i in range(len(R)- 1):
        if i != N_max-1:
            dR_tilde[i] = (u_tilde[i + 1] - u_tilde[i - i])/(2*DELTA*h_tilde[i]) - u_tilde[i]*(h_tilde[i + 1] - h_tilde[i - 1])/(2*DELTA*h_tilde[i]**2)
            dR_tilde[i] = dR_tilde[i]**2
    return dR_tilde, u_tilde

def temp_slope(zeta, R, dR, g00, grr, ZETA_S, e):
    '''input single values
    return is single values'''
    if zeta == 0:
        dA = 0#keeps our temp values from blowing up to infinity or being undefined
        dB = 0
    else:
        dA = (grr-1)/(2*zeta) - (ZETA_S*zeta*grr*R**2)/4 + ((ZETA_S**2)*zeta/8)*(dR)**2 + (ZETA_S*zeta/4)*(1+(ZETA_S*e)/2)**2 * (grr/g00) * (R)**2
        dB = -(grr-1)/(2*zeta) + (ZETA_S*zeta*grr*R**2)/4 + ((ZETA_S**2)*zeta/8)*(dR)**2 + (ZETA_S*zeta/4)*(1+(ZETA_S*e)/2)**2 * (grr/g00) * (R)**2
    #print("dA temp_func=", dA)
    return dA, dB

def R_K(A, B, R, g00, grr, dR, ZETA_S, u_tilde, e):
    '''parameters all arrays except e
    return two arrays A's and B's'''
    
    A[N_max - 1], B[N_max - 1] = A_B_end(u_tilde, g00, grr, ZETA_S)
    
    for i in range(len(R)-1, 0, -1):
        dA_slope, dB_slope = temp_slope(ZETA[i], R[i], dR[i], g00[i], grr[i], ZETA_S, e)
        if i == 0:
            A_temp = 0#keeps our temp values from blowing up to infinity or being undefined
            B_temp = 0
        else:
            A_temp = A[i] - DELTA*temp_slope(ZETA[i], R[i], dR[i], g00[i], grr[i], ZETA_S, e)[0]
            B_temp = B[i] - DELTA*temp_slope(ZETA[i], R[i], dR[i], g00[i], grr[i], ZETA_S, e)[1]
        g00_temp = np.exp(2*A_temp)
        grr_temp = np.exp(2*B_temp)
        dA_temp, dB_temp = temp_slope(ZETA[i] - DELTA, R[i], dR[i], g00_temp, grr_temp, ZETA_S, e)
        #print("dA_slope= ", dA_slope)
        #print("dA_temp= ", dA_temp)
        A[i-1] = A[i] - (DELTA/2)*(dA_slope  + dA_temp)
        B[i-1] = B[i] - (DELTA/2)*(dB_slope + dB_temp)
        
    A[0] = 0
    B[0] = 0
    return [A, B]

def new_g00_grr(A, B):
    g00 = np.exp(2*A)
    grr = np.exp(2*B)
    return g00, grr

def U_final(g00, grr,u):
    U_final = (u/np.sqrt(a))*np.sqrt(g00/grr)
    return U_final

#Main Function-------------------------------------------------------
def main():
    
    zeta_s = [.01, .1, .2, 0.5, 1] #how relativistic the function is
    values = []
    
    for j, zetta_s_current in enumerate(zeta_s):
        ZETA_S = zeta_s[j]
        g00, grr = metric(ZETA_S)
        for i in range(loops):
            
            A, B = A_B_solver(ZETA_S)
            C,D,F = KG_values(g00, grr, A, ZETA_S)
            matrix = KG_matrix(C, D, F)
            e, u = KG_solver(matrix, g00, grr, ZETA_S,)
            values.append(e)
            R = R_tilde(g00, grr, u)
            dR, u_tilde = dR_tilde(R, g00, grr, u)
            A_array, B_array = R_K(A, B, R, g00, grr, dR, ZETA_S, u_tilde, e)
            g00, grr = new_g00_grr(A, B)
            U = U_final(g00, grr,u)
            U_abs = abs(U)
        array = np.array(values)
        min_e = np.min(array)
        print("U= ", U)
        print("epsilon= ",array)
        print("lowest epsilon= ", min_e)
        plt.figure(1)
        plt.plot(ZETA, U_abs, label=zetta_s_current)
        plt.xlabel("ZETA")
        plt.xlim(0,30)
        plt.ylabel("U_bar")
        plt.legend()
        plt.grid(True)
        plt.figure(2)
        plt.subplot(211)
        plt.plot(ZETA, A_array)
        plt.xlabel("ZETA")
        plt.xlim(0,30)
        plt.ylabel("A_array")
        plt.grid(True)
        plt.subplot(212)
        plt.plot(ZETA, B_array)
        plt.xlabel("ZETA")
        plt.xlim(0,30)
        plt.ylabel("B_array")
        plt.grid(True)
        plt.figure(3)
        plt.plot(ZETA, R, label=zetta_s_current)
        plt.xlabel("ZETA")
        plt.xlim(0,30)
        plt.ylabel("R_TILDE")
        plt.legend()
        plt.grid(True)
    plt.show()
_ = main()